Watcher: 
tsc -w

String/Numbers
var age: number = 5
var symbol: string = '#'

String Literal Type
var symbol: '#' = '#' // Can only be the value #. But use const instead

Union Types
const symbol: '#' | '$' = '#'


Alias Types
type ValidSymbol = '#' | '$'

Function Type Annotations
function generateRandomId(symbol: ValidSymbol, length: number): string {}

Void Functions
function something() {
	alert('Hello');
}
This function doesn't return anything, so it is implicitly return type void

Never Functions
function something(): never {
	throw new Error('Fail'); 
}
function something2(): never {
	while(true) {}
}
No way to progress to the end of the function. So it never returns

Optional Paramaters
function someFn(a: int, length?: number)
The question mark denotes optional parameter
Or es6 default params:
function someFn(a: int, length: number = 7)

Interfaces:
interface GenerateConfig { 
	symbol: ValidSymbol, 
	length: number 
}

Function Overload:
function generateRandomId(options: GenerateConfig): string	
function generateRandomId(symbol: ValidSymbol, length: number): string
function generateRandomId(optionsOrSymbol: ValidSymbol | GenerateConfig): string {
	if (typeof optionsOrSymbol === "string") {
		return optionsOrSymbol + Math.random().toString(36).substr(2, length)	
	}
    return optionsOrSymbol.symbol + 
    	Math.random().toString(36).substr(2, optionsOrSymbol.length)
}

Generics
function identity<T>(arg: T): T {
	return arg; 
}
We are saying that whatever the type I pass in, I want to return a value with the same type 

Classes
class App {
	id : string
	constructor() {
		this.id = ".."
	}
}
Unlike ES5 Classes, properties are not declared in the constructor. You have to set properties 
on the class itself then access it throughout your class using this. 

For base classes, use the extends keyword. 

class App extends Component() {

}

App inherits all the functions from Component, even constructor. So if App is created and 
doesn't have it's own constructor function, it will call the base class (Component) constructor

TypeScript classes are both interfaces and class implementations. You can have an interface look
like this:
class Component {
	onInit() {}
}
class A implements Component {
	onInit() {...}
}
A has to implement the onInit function if it implements the Component class. 
During compile time the Component class is turned into a JavaScript function. This may hurt
performance because we are adding extra code into the compiled file. Component doesn't do 
anything other than have a structure we want. So like earlier, we can just use interfaces:
interface Component {
	onInit()
}
This time we exclude the curly braces because we are not providing any implmentation and
on the plus side, during compile time this whole interface goes away. TypeScript only uses
it for type checking

Access Modifiers
public - accessible just about anywhere
private - only accessible in the class
protected - only accessible in current class and all children of the class
readonly - makes the property immutable
private a : int = 5
public static id : 'app'
protected readonly name = 'sunny'

Class Decorators
@Component({ id: 'app' })
class App {..}
Need to include in tsconfig: 
experimentalDecorators: true
You then need to define the decorator as:
function Component(options) {
	return (target) => target.id = options.id
}
Here, the decorator Component takes in an object, 
and when returning, takes the id it was passed in and adds it to the target class (App)
This also works on methods as well

Property and Parameter Decorators
class App {
	@prop
	someStr : string
}
function prop(x, name) {
	// x is the class prototype you are in
	// name is the name of the property that has the prop decorator
}
function param(x,name,index) {
	// For parameter Decorators
	// where index is the index of the parameter in the list of params
}
If the property/method is an instance property, decorators receive the prototype of the function
in the first argument. If it is static, it receives the constructor function as the first arg (x)

Typings File typings.d.ts
The typings file is used when you are importing a 3rd party library
that is written in JavaScript and your compiler has no information
about the types of the functions and properties of the library. 
To let the compiler know about third party types, you have to declare
the modules in the typings file and declare their exports.
Example:
declare module 'lodash' {
	export function random(min: number, max: number):number
}

This may be cumbersome and hard to maintain so the community built
DefinitelyTyped and @types npm library
https://github.com/DefinitelyTyped/DefinitelyTyped
https://www.npmjs.com/~types

